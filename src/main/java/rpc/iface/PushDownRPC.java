package rpc.iface;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-08-04")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class PushDownRPC {

  public interface Iface {

    public DataChunk pullEvents(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void pullEvents(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<DataChunk> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public DataChunk pullEvents(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException
    {
      send_pullEvents(tableName, offset, ipMap);
      return recv_pullEvents();
    }

    public void send_pullEvents(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) throws org.apache.thrift.TException
    {
      pullEvents_args args = new pullEvents_args();
      args.setTableName(tableName);
      args.setOffset(offset);
      args.setIpMap(ipMap);
      sendBase("pullEvents", args);
    }

    public DataChunk recv_pullEvents() throws org.apache.thrift.TException
    {
      pullEvents_result result = new pullEvents_result();
      receiveBase(result, "pullEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pullEvents failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void pullEvents(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<DataChunk> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pullEvents_call method_call = new pullEvents_call(tableName, offset, ipMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pullEvents_call extends org.apache.thrift.async.TAsyncMethodCall<DataChunk> {
      private java.lang.String tableName;
      private int offset;
      private java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap;
      public pullEvents_call(java.lang.String tableName, int offset, java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap, org.apache.thrift.async.AsyncMethodCallback<DataChunk> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableName = tableName;
        this.offset = offset;
        this.ipMap = ipMap;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pullEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pullEvents_args args = new pullEvents_args();
        args.setTableName(tableName);
        args.setOffset(offset);
        args.setIpMap(ipMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public DataChunk getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pullEvents();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("pullEvents", new pullEvents());
      return processMap;
    }

    public static class pullEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pullEvents_args, pullEvents_result> {
      public pullEvents() {
        super("pullEvents");
      }

      @Override
      public pullEvents_args getEmptyArgsInstance() {
        return new pullEvents_args();
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public pullEvents_result getEmptyResultInstance() {
        return new pullEvents_result();
      }

      @Override
      public pullEvents_result getResult(I iface, pullEvents_args args) throws org.apache.thrift.TException {
        pullEvents_result result = getEmptyResultInstance();
        result.success = iface.pullEvents(args.tableName, args.offset, args.ipMap);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?, ? extends org.apache.thrift.TBase>> processMap) {
      processMap.put("pullEvents", new pullEvents());
      return processMap;
    }

    public static class pullEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pullEvents_args, DataChunk, pullEvents_result> {
      public pullEvents() {
        super("pullEvents");
      }

      @Override
      public pullEvents_result getEmptyResultInstance() {
        return new pullEvents_result();
      }

      @Override
      public pullEvents_args getEmptyArgsInstance() {
        return new pullEvents_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<DataChunk> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DataChunk>() { 
          @Override
          public void onComplete(DataChunk o) {
            pullEvents_result result = new pullEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pullEvents_result result = new pullEvents_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      public boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, pullEvents_args args, org.apache.thrift.async.AsyncMethodCallback<DataChunk> resultHandler) throws org.apache.thrift.TException {
        iface.pullEvents(args.tableName, args.offset, args.ipMap,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class pullEvents_args implements org.apache.thrift.TBase<pullEvents_args, pullEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<pullEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullEvents_args");

    private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField IP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("ipMap", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pullEvents_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pullEvents_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String tableName; // required
    public int offset; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TABLE_NAME((short)1, "tableName"),
      OFFSET((short)2, "offset"),
      IP_MAP((short)3, "ipMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TABLE_NAME
            return TABLE_NAME;
          case 2: // OFFSET
            return OFFSET;
          case 3: // IP_MAP
            return IP_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OFFSET_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.IP_MAP, new org.apache.thrift.meta_data.FieldMetaData("ipMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullEvents_args.class, metaDataMap);
    }

    public pullEvents_args() {
    }

    public pullEvents_args(
      java.lang.String tableName,
      int offset,
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap)
    {
      this();
      this.tableName = tableName;
      this.offset = offset;
      setOffsetIsSet(true);
      this.ipMap = ipMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullEvents_args(pullEvents_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTableName()) {
        this.tableName = other.tableName;
      }
      this.offset = other.offset;
      if (other.isSetIpMap()) {
        java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.ipMap.size());
        for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.ipMap.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          java.util.List<java.lang.String> other_element_value = other_element.getValue();

          java.lang.String __this__ipMap_copy_key = other_element_key;

          java.util.List<java.lang.String> __this__ipMap_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

          __this__ipMap.put(__this__ipMap_copy_key, __this__ipMap_copy_value);
        }
        this.ipMap = __this__ipMap;
      }
    }

    @Override
    public pullEvents_args deepCopy() {
      return new pullEvents_args(this);
    }

    @Override
    public void clear() {
      this.tableName = null;
      setOffsetIsSet(false);
      this.offset = 0;
      this.ipMap = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTableName() {
      return this.tableName;
    }

    public pullEvents_args setTableName(@org.apache.thrift.annotation.Nullable java.lang.String tableName) {
      this.tableName = tableName;
      return this;
    }

    public void unsetTableName() {
      this.tableName = null;
    }

    /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
    public boolean isSetTableName() {
      return this.tableName != null;
    }

    public void setTableNameIsSet(boolean value) {
      if (!value) {
        this.tableName = null;
      }
    }

    public int getOffset() {
      return this.offset;
    }

    public pullEvents_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public int getIpMapSize() {
      return (this.ipMap == null) ? 0 : this.ipMap.size();
    }

    public void putToIpMap(java.lang.String key, java.util.List<java.lang.String> val) {
      if (this.ipMap == null) {
        this.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
      }
      this.ipMap.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getIpMap() {
      return this.ipMap;
    }

    public pullEvents_args setIpMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> ipMap) {
      this.ipMap = ipMap;
      return this;
    }

    public void unsetIpMap() {
      this.ipMap = null;
    }

    /** Returns true if field ipMap is set (has been assigned a value) and false otherwise */
    public boolean isSetIpMap() {
      return this.ipMap != null;
    }

    public void setIpMapIsSet(boolean value) {
      if (!value) {
        this.ipMap = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TABLE_NAME:
        if (value == null) {
          unsetTableName();
        } else {
          setTableName((java.lang.String)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((java.lang.Integer)value);
        }
        break;

      case IP_MAP:
        if (value == null) {
          unsetIpMap();
        } else {
          setIpMap((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TABLE_NAME:
        return getTableName();

      case OFFSET:
        return getOffset();

      case IP_MAP:
        return getIpMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE_NAME:
        return isSetTableName();
      case OFFSET:
        return isSetOffset();
      case IP_MAP:
        return isSetIpMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof pullEvents_args)
        return this.equals((pullEvents_args)that);
      return false;
    }

    public boolean equals(pullEvents_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tableName = true && this.isSetTableName();
      boolean that_present_tableName = true && that.isSetTableName();
      if (this_present_tableName || that_present_tableName) {
        if (!(this_present_tableName && that_present_tableName))
          return false;
        if (!this.tableName.equals(that.tableName))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_ipMap = true && this.isSetIpMap();
      boolean that_present_ipMap = true && that.isSetIpMap();
      if (this_present_ipMap || that_present_ipMap) {
        if (!(this_present_ipMap && that_present_ipMap))
          return false;
        if (!this.ipMap.equals(that.ipMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
      if (isSetTableName())
        hashCode = hashCode * 8191 + tableName.hashCode();

      hashCode = hashCode * 8191 + offset;

      hashCode = hashCode * 8191 + ((isSetIpMap()) ? 131071 : 524287);
      if (isSetIpMap())
        hashCode = hashCode * 8191 + ipMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pullEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTableName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetOffset(), other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIpMap(), other.isSetIpMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIpMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipMap, other.ipMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pullEvents_args(");
      boolean first = true;

      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        sb.append(this.tableName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ipMap:");
      if (this.ipMap == null) {
        sb.append("null");
      } else {
        sb.append(this.ipMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullEvents_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public pullEvents_argsStandardScheme getScheme() {
        return new pullEvents_argsStandardScheme();
      }
    }

    private static class pullEvents_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pullEvents_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, pullEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TABLE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tableName = iprot.readString();
                struct.setTableNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IP_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map38.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _key39;
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val40;
                  for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                  {
                    _key39 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                      _val40 = new java.util.ArrayList<java.lang.String>(_list42.size);
                      @org.apache.thrift.annotation.Nullable java.lang.String _elem43;
                      for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                      {
                        _elem43 = iprot.readString();
                        _val40.add(_elem43);
                      }
                      iprot.readListEnd();
                    }
                    struct.ipMap.put(_key39, _val40);
                  }
                  iprot.readMapEnd();
                }
                struct.setIpMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, pullEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tableName != null) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeString(struct.tableName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        if (struct.ipMap != null) {
          oprot.writeFieldBegin(IP_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.ipMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter45 : struct.ipMap.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter45.getValue().size()));
                for (java.lang.String _iter46 : _iter45.getValue())
                {
                  oprot.writeString(_iter46);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullEvents_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public pullEvents_argsTupleScheme getScheme() {
        return new pullEvents_argsTupleScheme();
      }
    }

    private static class pullEvents_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pullEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTableName()) {
          optionals.set(0);
        }
        if (struct.isSetOffset()) {
          optionals.set(1);
        }
        if (struct.isSetIpMap()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTableName()) {
          oprot.writeString(struct.tableName);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
        if (struct.isSetIpMap()) {
          {
            oprot.writeI32(struct.ipMap.size());
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter47 : struct.ipMap.entrySet())
            {
              oprot.writeString(_iter47.getKey());
              {
                oprot.writeI32(_iter47.getValue().size());
                for (java.lang.String _iter48 : _iter47.getValue())
                {
                  oprot.writeString(_iter48);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map49 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST); 
            struct.ipMap = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map49.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _key50;
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val51;
            for (int _i52 = 0; _i52 < _map49.size; ++_i52)
            {
              _key50 = iprot.readString();
              {
                org.apache.thrift.protocol.TList _list53 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
                _val51 = new java.util.ArrayList<java.lang.String>(_list53.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem54;
                for (int _i55 = 0; _i55 < _list53.size; ++_i55)
                {
                  _elem54 = iprot.readString();
                  _val51.add(_elem54);
                }
              }
              struct.ipMap.put(_key50, _val51);
            }
          }
          struct.setIpMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class pullEvents_result implements org.apache.thrift.TBase<pullEvents_result, pullEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<pullEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pullEvents_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pullEvents_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DataChunk success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataChunk.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullEvents_result.class, metaDataMap);
    }

    public pullEvents_result() {
    }

    public pullEvents_result(
      DataChunk success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullEvents_result(pullEvents_result other) {
      if (other.isSetSuccess()) {
        this.success = new DataChunk(other.success);
      }
    }

    @Override
    public pullEvents_result deepCopy() {
      return new pullEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DataChunk getSuccess() {
      return this.success;
    }

    public pullEvents_result setSuccess(@org.apache.thrift.annotation.Nullable DataChunk success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DataChunk)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof pullEvents_result)
        return this.equals((pullEvents_result)that);
      return false;
    }

    public boolean equals(pullEvents_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pullEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pullEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullEvents_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public pullEvents_resultStandardScheme getScheme() {
        return new pullEvents_resultStandardScheme();
      }
    }

    private static class pullEvents_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pullEvents_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, pullEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DataChunk();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, pullEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullEvents_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public pullEvents_resultTupleScheme getScheme() {
        return new pullEvents_resultTupleScheme();
      }
    }

    private static class pullEvents_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pullEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DataChunk();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
