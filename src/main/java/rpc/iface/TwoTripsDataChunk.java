package rpc.iface;

/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-08-04")
public class TwoTripsDataChunk implements org.apache.thrift.TBase<TwoTripsDataChunk, TwoTripsDataChunk._Fields>, java.io.Serializable, Cloneable, Comparable<TwoTripsDataChunk> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TwoTripsDataChunk");

  private static final org.apache.thrift.protocol.TField CHUNK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INTERVAL_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intervalMap", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PAIR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("pairMap", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField IS_LAST_CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("isLastChunk", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TwoTripsDataChunkStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TwoTripsDataChunkTupleSchemeFactory();

  public int chunkId; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> intervalMap; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Set<TsAttrPair>> pairMap; // required
  public boolean isLastChunk; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHUNK_ID((short)1, "chunkId"),
    INTERVAL_MAP((short)2, "intervalMap"),
    PAIR_MAP((short)3, "pairMap"),
    IS_LAST_CHUNK((short)4, "isLastChunk");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHUNK_ID
          return CHUNK_ID;
        case 2: // INTERVAL_MAP
          return INTERVAL_MAP;
        case 3: // PAIR_MAP
          return PAIR_MAP;
        case 4: // IS_LAST_CHUNK
          return IS_LAST_CHUNK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHUNKID_ISSET_ID = 0;
  private static final int __ISLASTCHUNK_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHUNK_ID, new org.apache.thrift.meta_data.FieldMetaData("chunkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVAL_MAP, new org.apache.thrift.meta_data.FieldMetaData("intervalMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.PAIR_MAP, new org.apache.thrift.meta_data.FieldMetaData("pairMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TsAttrPair.class)))));
    tmpMap.put(_Fields.IS_LAST_CHUNK, new org.apache.thrift.meta_data.FieldMetaData("isLastChunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TwoTripsDataChunk.class, metaDataMap);
  }

  public TwoTripsDataChunk() {
  }

  public TwoTripsDataChunk(
    int chunkId,
    java.util.Map<java.lang.String,java.nio.ByteBuffer> intervalMap,
    java.util.Map<java.lang.String,java.util.Set<TsAttrPair>> pairMap,
    boolean isLastChunk)
  {
    this();
    this.chunkId = chunkId;
    setChunkIdIsSet(true);
    this.intervalMap = intervalMap;
    this.pairMap = pairMap;
    this.isLastChunk = isLastChunk;
    setIsLastChunkIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TwoTripsDataChunk(TwoTripsDataChunk other) {
    __isset_bitfield = other.__isset_bitfield;
    this.chunkId = other.chunkId;
    if (other.isSetIntervalMap()) {
      java.util.Map<java.lang.String,java.nio.ByteBuffer> __this__intervalMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(other.intervalMap);
      this.intervalMap = __this__intervalMap;
    }
    if (other.isSetPairMap()) {
      java.util.Map<java.lang.String,java.util.Set<TsAttrPair>> __this__pairMap = new java.util.HashMap<java.lang.String,java.util.Set<TsAttrPair>>(other.pairMap.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Set<TsAttrPair>> other_element : other.pairMap.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Set<TsAttrPair> other_element_value = other_element.getValue();

        java.lang.String __this__pairMap_copy_key = other_element_key;

        java.util.Set<TsAttrPair> __this__pairMap_copy_value = new java.util.HashSet<TsAttrPair>(other_element_value.size());
        for (TsAttrPair other_element_value_element : other_element_value) {
          __this__pairMap_copy_value.add(new TsAttrPair(other_element_value_element));
        }

        __this__pairMap.put(__this__pairMap_copy_key, __this__pairMap_copy_value);
      }
      this.pairMap = __this__pairMap;
    }
    this.isLastChunk = other.isLastChunk;
  }

  @Override
  public TwoTripsDataChunk deepCopy() {
    return new TwoTripsDataChunk(this);
  }

  @Override
  public void clear() {
    setChunkIdIsSet(false);
    this.chunkId = 0;
    this.intervalMap = null;
    this.pairMap = null;
    setIsLastChunkIsSet(false);
    this.isLastChunk = false;
  }

  public int getChunkId() {
    return this.chunkId;
  }

  public TwoTripsDataChunk setChunkId(int chunkId) {
    this.chunkId = chunkId;
    setChunkIdIsSet(true);
    return this;
  }

  public void unsetChunkId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHUNKID_ISSET_ID);
  }

  /** Returns true if field chunkId is set (has been assigned a value) and false otherwise */
  public boolean isSetChunkId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHUNKID_ISSET_ID);
  }

  public void setChunkIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHUNKID_ISSET_ID, value);
  }

  public int getIntervalMapSize() {
    return (this.intervalMap == null) ? 0 : this.intervalMap.size();
  }

  public void putToIntervalMap(java.lang.String key, java.nio.ByteBuffer val) {
    if (this.intervalMap == null) {
      this.intervalMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>();
    }
    this.intervalMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getIntervalMap() {
    return this.intervalMap;
  }

  public TwoTripsDataChunk setIntervalMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.nio.ByteBuffer> intervalMap) {
    this.intervalMap = intervalMap;
    return this;
  }

  public void unsetIntervalMap() {
    this.intervalMap = null;
  }

  /** Returns true if field intervalMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntervalMap() {
    return this.intervalMap != null;
  }

  public void setIntervalMapIsSet(boolean value) {
    if (!value) {
      this.intervalMap = null;
    }
  }

  public int getPairMapSize() {
    return (this.pairMap == null) ? 0 : this.pairMap.size();
  }

  public void putToPairMap(java.lang.String key, java.util.Set<TsAttrPair> val) {
    if (this.pairMap == null) {
      this.pairMap = new java.util.HashMap<java.lang.String,java.util.Set<TsAttrPair>>();
    }
    this.pairMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.Set<TsAttrPair>> getPairMap() {
    return this.pairMap;
  }

  public TwoTripsDataChunk setPairMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Set<TsAttrPair>> pairMap) {
    this.pairMap = pairMap;
    return this;
  }

  public void unsetPairMap() {
    this.pairMap = null;
  }

  /** Returns true if field pairMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPairMap() {
    return this.pairMap != null;
  }

  public void setPairMapIsSet(boolean value) {
    if (!value) {
      this.pairMap = null;
    }
  }

  public boolean isIsLastChunk() {
    return this.isLastChunk;
  }

  public TwoTripsDataChunk setIsLastChunk(boolean isLastChunk) {
    this.isLastChunk = isLastChunk;
    setIsLastChunkIsSet(true);
    return this;
  }

  public void unsetIsLastChunk() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISLASTCHUNK_ISSET_ID);
  }

  /** Returns true if field isLastChunk is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLastChunk() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISLASTCHUNK_ISSET_ID);
  }

  public void setIsLastChunkIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISLASTCHUNK_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHUNK_ID:
      if (value == null) {
        unsetChunkId();
      } else {
        setChunkId((java.lang.Integer)value);
      }
      break;

    case INTERVAL_MAP:
      if (value == null) {
        unsetIntervalMap();
      } else {
        setIntervalMap((java.util.Map<java.lang.String,java.nio.ByteBuffer>)value);
      }
      break;

    case PAIR_MAP:
      if (value == null) {
        unsetPairMap();
      } else {
        setPairMap((java.util.Map<java.lang.String,java.util.Set<TsAttrPair>>)value);
      }
      break;

    case IS_LAST_CHUNK:
      if (value == null) {
        unsetIsLastChunk();
      } else {
        setIsLastChunk((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHUNK_ID:
      return getChunkId();

    case INTERVAL_MAP:
      return getIntervalMap();

    case PAIR_MAP:
      return getPairMap();

    case IS_LAST_CHUNK:
      return isIsLastChunk();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHUNK_ID:
      return isSetChunkId();
    case INTERVAL_MAP:
      return isSetIntervalMap();
    case PAIR_MAP:
      return isSetPairMap();
    case IS_LAST_CHUNK:
      return isSetIsLastChunk();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TwoTripsDataChunk)
      return this.equals((TwoTripsDataChunk)that);
    return false;
  }

  public boolean equals(TwoTripsDataChunk that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chunkId = true;
    boolean that_present_chunkId = true;
    if (this_present_chunkId || that_present_chunkId) {
      if (!(this_present_chunkId && that_present_chunkId))
        return false;
      if (this.chunkId != that.chunkId)
        return false;
    }

    boolean this_present_intervalMap = true && this.isSetIntervalMap();
    boolean that_present_intervalMap = true && that.isSetIntervalMap();
    if (this_present_intervalMap || that_present_intervalMap) {
      if (!(this_present_intervalMap && that_present_intervalMap))
        return false;
      if (!this.intervalMap.equals(that.intervalMap))
        return false;
    }

    boolean this_present_pairMap = true && this.isSetPairMap();
    boolean that_present_pairMap = true && that.isSetPairMap();
    if (this_present_pairMap || that_present_pairMap) {
      if (!(this_present_pairMap && that_present_pairMap))
        return false;
      if (!this.pairMap.equals(that.pairMap))
        return false;
    }

    boolean this_present_isLastChunk = true;
    boolean that_present_isLastChunk = true;
    if (this_present_isLastChunk || that_present_isLastChunk) {
      if (!(this_present_isLastChunk && that_present_isLastChunk))
        return false;
      if (this.isLastChunk != that.isLastChunk)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + chunkId;

    hashCode = hashCode * 8191 + ((isSetIntervalMap()) ? 131071 : 524287);
    if (isSetIntervalMap())
      hashCode = hashCode * 8191 + intervalMap.hashCode();

    hashCode = hashCode * 8191 + ((isSetPairMap()) ? 131071 : 524287);
    if (isSetPairMap())
      hashCode = hashCode * 8191 + pairMap.hashCode();

    hashCode = hashCode * 8191 + ((isLastChunk) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(TwoTripsDataChunk other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetChunkId(), other.isSetChunkId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkId, other.chunkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIntervalMap(), other.isSetIntervalMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntervalMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervalMap, other.intervalMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPairMap(), other.isSetPairMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPairMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pairMap, other.pairMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsLastChunk(), other.isSetIsLastChunk());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLastChunk()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLastChunk, other.isLastChunk);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TwoTripsDataChunk(");
    boolean first = true;

    sb.append("chunkId:");
    sb.append(this.chunkId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("intervalMap:");
    if (this.intervalMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intervalMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pairMap:");
    if (this.pairMap == null) {
      sb.append("null");
    } else {
      sb.append(this.pairMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLastChunk:");
    sb.append(this.isLastChunk);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TwoTripsDataChunkStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TwoTripsDataChunkStandardScheme getScheme() {
      return new TwoTripsDataChunkStandardScheme();
    }
  }

  private static class TwoTripsDataChunkStandardScheme extends org.apache.thrift.scheme.StandardScheme<TwoTripsDataChunk> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, TwoTripsDataChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHUNK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chunkId = iprot.readI32();
              struct.setChunkIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INTERVAL_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.intervalMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key1;
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readBinary();
                  struct.intervalMap.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setIntervalMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAIR_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.pairMap = new java.util.HashMap<java.lang.String,java.util.Set<TsAttrPair>>(2*_map4.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key5;
                @org.apache.thrift.annotation.Nullable java.util.Set<TsAttrPair> _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                    _val6 = new java.util.HashSet<TsAttrPair>(2*_set8.size);
                    @org.apache.thrift.annotation.Nullable TsAttrPair _elem9;
                    for (int _i10 = 0; _i10 < _set8.size; ++_i10)
                    {
                      _elem9 = new TsAttrPair();
                      _elem9.read(iprot);
                      _val6.add(_elem9);
                    }
                    iprot.readSetEnd();
                  }
                  struct.pairMap.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setPairMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_LAST_CHUNK
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLastChunk = iprot.readBool();
              struct.setIsLastChunkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, TwoTripsDataChunk struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CHUNK_ID_FIELD_DESC);
      oprot.writeI32(struct.chunkId);
      oprot.writeFieldEnd();
      if (struct.intervalMap != null) {
        oprot.writeFieldBegin(INTERVAL_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.intervalMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter11 : struct.intervalMap.entrySet())
          {
            oprot.writeString(_iter11.getKey());
            oprot.writeBinary(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.pairMap != null) {
        oprot.writeFieldBegin(PAIR_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.pairMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Set<TsAttrPair>> _iter12 : struct.pairMap.entrySet())
          {
            oprot.writeString(_iter12.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _iter12.getValue().size()));
              for (TsAttrPair _iter13 : _iter12.getValue())
              {
                _iter13.write(oprot);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_LAST_CHUNK_FIELD_DESC);
      oprot.writeBool(struct.isLastChunk);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TwoTripsDataChunkTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public TwoTripsDataChunkTupleScheme getScheme() {
      return new TwoTripsDataChunkTupleScheme();
    }
  }

  private static class TwoTripsDataChunkTupleScheme extends org.apache.thrift.scheme.TupleScheme<TwoTripsDataChunk> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TwoTripsDataChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChunkId()) {
        optionals.set(0);
      }
      if (struct.isSetIntervalMap()) {
        optionals.set(1);
      }
      if (struct.isSetPairMap()) {
        optionals.set(2);
      }
      if (struct.isSetIsLastChunk()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetChunkId()) {
        oprot.writeI32(struct.chunkId);
      }
      if (struct.isSetIntervalMap()) {
        {
          oprot.writeI32(struct.intervalMap.size());
          for (java.util.Map.Entry<java.lang.String, java.nio.ByteBuffer> _iter14 : struct.intervalMap.entrySet())
          {
            oprot.writeString(_iter14.getKey());
            oprot.writeBinary(_iter14.getValue());
          }
        }
      }
      if (struct.isSetPairMap()) {
        {
          oprot.writeI32(struct.pairMap.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Set<TsAttrPair>> _iter15 : struct.pairMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            {
              oprot.writeI32(_iter15.getValue().size());
              for (TsAttrPair _iter16 : _iter15.getValue())
              {
                _iter16.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetIsLastChunk()) {
        oprot.writeBool(struct.isLastChunk);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TwoTripsDataChunk struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.chunkId = iprot.readI32();
        struct.setChunkIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.intervalMap = new java.util.HashMap<java.lang.String,java.nio.ByteBuffer>(2*_map17.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key18;
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _val19;
          for (int _i20 = 0; _i20 < _map17.size; ++_i20)
          {
            _key18 = iprot.readString();
            _val19 = iprot.readBinary();
            struct.intervalMap.put(_key18, _val19);
          }
        }
        struct.setIntervalMapIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET); 
          struct.pairMap = new java.util.HashMap<java.lang.String,java.util.Set<TsAttrPair>>(2*_map21.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key22;
          @org.apache.thrift.annotation.Nullable java.util.Set<TsAttrPair> _val23;
          for (int _i24 = 0; _i24 < _map21.size; ++_i24)
          {
            _key22 = iprot.readString();
            {
              org.apache.thrift.protocol.TSet _set25 = iprot.readSetBegin(org.apache.thrift.protocol.TType.STRUCT);
              _val23 = new java.util.HashSet<TsAttrPair>(2*_set25.size);
              @org.apache.thrift.annotation.Nullable TsAttrPair _elem26;
              for (int _i27 = 0; _i27 < _set25.size; ++_i27)
              {
                _elem26 = new TsAttrPair();
                _elem26.read(iprot);
                _val23.add(_elem26);
              }
            }
            struct.pairMap.put(_key22, _val23);
          }
        }
        struct.setPairMapIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isLastChunk = iprot.readBool();
        struct.setIsLastChunkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

